{"format": "torch", "nodes": [{"name": "encoder", "id": 47700493348592, "class_name": "Encoder(\n  (encoding_blocks): ModuleList(\n    (0): EncodingBlock(\n      (conv1): ConvolutionalBlock(\n        (conv_layer): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n        (activation_layer): ReLU()\n        (block): Sequential(\n          (0): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): ReLU()\n        )\n      )\n      (conv2): ConvolutionalBlock(\n        (conv_layer): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n        (norm_layer): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (activation_layer): ReLU()\n        (block): Sequential(\n          (0): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU()\n        )\n      )\n      (conv_residual): ConvolutionalBlock(\n        (conv_layer): Conv3d(1, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (block): Sequential(\n          (0): Conv3d(1, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        )\n      )\n      (downsample): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    )\n    (1): EncodingBlock(\n      (conv1): ConvolutionalBlock(\n        (conv_layer): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n        (norm_layer): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (activation_layer): ReLU()\n        (block): Sequential(\n          (0): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU()\n        )\n      )\n      (conv2): ConvolutionalBlock(\n        (conv_layer): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n        (norm_layer): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (activation_layer): ReLU()\n        (block): Sequential(\n          (0): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU()\n        )\n      )\n      (conv_residual): ConvolutionalBlock(\n        (conv_layer): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (block): Sequential(\n          (0): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        )\n      )\n      (downsample): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    )\n    (2): EncodingBlock(\n      (conv1): ConvolutionalBlock(\n        (conv_layer): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n        (norm_layer): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (activation_layer): ReLU()\n        (block): Sequential(\n          (0): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU()\n        )\n      )\n      (conv2): ConvolutionalBlock(\n        (conv_layer): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n        (norm_layer): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (activation_layer): ReLU()\n        (block): Sequential(\n          (0): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU()\n        )\n      )\n      (conv_residual): ConvolutionalBlock(\n        (conv_layer): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (block): Sequential(\n          (0): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        )\n      )\n      (downsample): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    )\n  )\n)", "parameters": [["encoding_blocks.0.conv1.conv_layer.weight", [32, 1, 3, 3, 3]], ["encoding_blocks.0.conv1.conv_layer.bias", [32]], ["encoding_blocks.0.conv2.conv_layer.weight", [64, 32, 3, 3, 3]], ["encoding_blocks.0.conv2.conv_layer.bias", [64]], ["encoding_blocks.0.conv2.norm_layer.weight", [64]], ["encoding_blocks.0.conv2.norm_layer.bias", [64]], ["encoding_blocks.0.conv_residual.conv_layer.weight", [64, 1, 1, 1, 1]], ["encoding_blocks.0.conv_residual.conv_layer.bias", [64]], ["encoding_blocks.1.conv1.conv_layer.weight", [64, 64, 3, 3, 3]], ["encoding_blocks.1.conv1.conv_layer.bias", [64]], ["encoding_blocks.1.conv1.norm_layer.weight", [64]], ["encoding_blocks.1.conv1.norm_layer.bias", [64]], ["encoding_blocks.1.conv2.conv_layer.weight", [128, 64, 3, 3, 3]], ["encoding_blocks.1.conv2.conv_layer.bias", [128]], ["encoding_blocks.1.conv2.norm_layer.weight", [128]], ["encoding_blocks.1.conv2.norm_layer.bias", [128]], ["encoding_blocks.1.conv_residual.conv_layer.weight", [128, 64, 1, 1, 1]], ["encoding_blocks.1.conv_residual.conv_layer.bias", [128]], ["encoding_blocks.2.conv1.conv_layer.weight", [128, 128, 3, 3, 3]], ["encoding_blocks.2.conv1.conv_layer.bias", [128]], ["encoding_blocks.2.conv1.norm_layer.weight", [128]], ["encoding_blocks.2.conv1.norm_layer.bias", [128]], ["encoding_blocks.2.conv2.conv_layer.weight", [256, 128, 3, 3, 3]], ["encoding_blocks.2.conv2.conv_layer.bias", [256]], ["encoding_blocks.2.conv2.norm_layer.weight", [256]], ["encoding_blocks.2.conv2.norm_layer.bias", [256]], ["encoding_blocks.2.conv_residual.conv_layer.weight", [256, 128, 1, 1, 1]], ["encoding_blocks.2.conv_residual.conv_layer.bias", [256]]], "output_shape": [[[2, 64, 32, 128, 128], [2, 128, 16, 64, 64], [2, 256, 8, 32, 32]], [2, 256, 4, 16, 16]], "num_parameters": [864, 32, 55296, 64, 64, 64, 64, 64, 110592, 64, 64, 64, 221184, 128, 128, 128, 8192, 128, 442368, 128, 128, 128, 884736, 256, 256, 256, 32768, 256]}, {"name": "bottom_block", "id": 47700493396344, "class_name": "EncodingBlock(\n  (conv1): ConvolutionalBlock(\n    (conv_layer): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n    (norm_layer): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (activation_layer): ReLU()\n    (block): Sequential(\n      (0): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n      (1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU()\n    )\n  )\n  (conv2): ConvolutionalBlock(\n    (conv_layer): Conv3d(256, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n    (norm_layer): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (activation_layer): ReLU()\n    (block): Sequential(\n      (0): Conv3d(256, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n      (1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU()\n    )\n  )\n  (conv_residual): ConvolutionalBlock(\n    (conv_layer): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n    (block): Sequential(\n      (0): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n    )\n  )\n)", "parameters": [["conv1.conv_layer.weight", [256, 256, 3, 3, 3]], ["conv1.conv_layer.bias", [256]], ["conv1.norm_layer.weight", [256]], ["conv1.norm_layer.bias", [256]], ["conv2.conv_layer.weight", [512, 256, 3, 3, 3]], ["conv2.conv_layer.bias", [512]], ["conv2.norm_layer.weight", [512]], ["conv2.norm_layer.bias", [512]], ["conv_residual.conv_layer.weight", [512, 256, 1, 1, 1]], ["conv_residual.conv_layer.bias", [512]]], "output_shape": [[2, 512, 4, 16, 16]], "num_parameters": [1769472, 256, 256, 256, 3538944, 512, 512, 512, 131072, 512]}, {"name": "decoder", "id": 47700510372528, "class_name": "Decoder(\n  (decoding_blocks): ModuleList(\n    (0): DecodingBlock(\n      (upsample): ConvTranspose3d(512, 512, kernel_size=(2, 2, 2), stride=(2, 2, 2))\n      (conv1): ConvolutionalBlock(\n        (conv_layer): Conv3d(768, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n        (norm_layer): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (activation_layer): ReLU()\n        (block): Sequential(\n          (0): Conv3d(768, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU()\n        )\n      )\n      (conv2): ConvolutionalBlock(\n        (conv_layer): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n        (norm_layer): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (activation_layer): ReLU()\n        (block): Sequential(\n          (0): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU()\n        )\n      )\n      (conv_residual): ConvolutionalBlock(\n        (conv_layer): Conv3d(768, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (block): Sequential(\n          (0): Conv3d(768, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        )\n      )\n    )\n    (1): DecodingBlock(\n      (upsample): ConvTranspose3d(256, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2))\n      (conv1): ConvolutionalBlock(\n        (conv_layer): Conv3d(384, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n        (norm_layer): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (activation_layer): ReLU()\n        (block): Sequential(\n          (0): Conv3d(384, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU()\n        )\n      )\n      (conv2): ConvolutionalBlock(\n        (conv_layer): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n        (norm_layer): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (activation_layer): ReLU()\n        (block): Sequential(\n          (0): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU()\n        )\n      )\n      (conv_residual): ConvolutionalBlock(\n        (conv_layer): Conv3d(384, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (block): Sequential(\n          (0): Conv3d(384, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        )\n      )\n    )\n    (2): DecodingBlock(\n      (upsample): ConvTranspose3d(128, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2))\n      (conv1): ConvolutionalBlock(\n        (conv_layer): Conv3d(192, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n        (norm_layer): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (activation_layer): ReLU()\n        (block): Sequential(\n          (0): Conv3d(192, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU()\n        )\n      )\n      (conv2): ConvolutionalBlock(\n        (conv_layer): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n        (norm_layer): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (activation_layer): ReLU()\n        (block): Sequential(\n          (0): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU()\n        )\n      )\n      (conv_residual): ConvolutionalBlock(\n        (conv_layer): Conv3d(192, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (block): Sequential(\n          (0): Conv3d(192, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        )\n      )\n    )\n  )\n)", "parameters": [["decoding_blocks.0.upsample.weight", [512, 512, 2, 2, 2]], ["decoding_blocks.0.upsample.bias", [512]], ["decoding_blocks.0.conv1.conv_layer.weight", [256, 768, 3, 3, 3]], ["decoding_blocks.0.conv1.conv_layer.bias", [256]], ["decoding_blocks.0.conv1.norm_layer.weight", [256]], ["decoding_blocks.0.conv1.norm_layer.bias", [256]], ["decoding_blocks.0.conv2.conv_layer.weight", [256, 256, 3, 3, 3]], ["decoding_blocks.0.conv2.conv_layer.bias", [256]], ["decoding_blocks.0.conv2.norm_layer.weight", [256]], ["decoding_blocks.0.conv2.norm_layer.bias", [256]], ["decoding_blocks.0.conv_residual.conv_layer.weight", [256, 768, 1, 1, 1]], ["decoding_blocks.0.conv_residual.conv_layer.bias", [256]], ["decoding_blocks.1.upsample.weight", [256, 256, 2, 2, 2]], ["decoding_blocks.1.upsample.bias", [256]], ["decoding_blocks.1.conv1.conv_layer.weight", [128, 384, 3, 3, 3]], ["decoding_blocks.1.conv1.conv_layer.bias", [128]], ["decoding_blocks.1.conv1.norm_layer.weight", [128]], ["decoding_blocks.1.conv1.norm_layer.bias", [128]], ["decoding_blocks.1.conv2.conv_layer.weight", [128, 128, 3, 3, 3]], ["decoding_blocks.1.conv2.conv_layer.bias", [128]], ["decoding_blocks.1.conv2.norm_layer.weight", [128]], ["decoding_blocks.1.conv2.norm_layer.bias", [128]], ["decoding_blocks.1.conv_residual.conv_layer.weight", [128, 384, 1, 1, 1]], ["decoding_blocks.1.conv_residual.conv_layer.bias", [128]], ["decoding_blocks.2.upsample.weight", [128, 128, 2, 2, 2]], ["decoding_blocks.2.upsample.bias", [128]], ["decoding_blocks.2.conv1.conv_layer.weight", [64, 192, 3, 3, 3]], ["decoding_blocks.2.conv1.conv_layer.bias", [64]], ["decoding_blocks.2.conv1.norm_layer.weight", [64]], ["decoding_blocks.2.conv1.norm_layer.bias", [64]], ["decoding_blocks.2.conv2.conv_layer.weight", [64, 64, 3, 3, 3]], ["decoding_blocks.2.conv2.conv_layer.bias", [64]], ["decoding_blocks.2.conv2.norm_layer.weight", [64]], ["decoding_blocks.2.conv2.norm_layer.bias", [64]], ["decoding_blocks.2.conv_residual.conv_layer.weight", [64, 192, 1, 1, 1]], ["decoding_blocks.2.conv_residual.conv_layer.bias", [64]]], "output_shape": [[2, 64, 32, 128, 128]], "num_parameters": [2097152, 512, 5308416, 256, 256, 256, 1769472, 256, 256, 256, 196608, 256, 524288, 256, 1327104, 128, 128, 128, 442368, 128, 128, 128, 49152, 128, 131072, 128, 331776, 64, 64, 64, 110592, 64, 64, 64, 12288, 64]}, {"name": "classifier", "id": 47700510375328, "class_name": "ConvolutionalBlock(\n  (conv_layer): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n  (block): Sequential(\n    (0): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n  )\n)", "parameters": [["conv_layer.weight", [2, 64, 1, 1, 1]], ["conv_layer.bias", [2]]], "output_shape": [[2, 2, 32, 128, 128]], "num_parameters": [128, 2]}], "edges": []}